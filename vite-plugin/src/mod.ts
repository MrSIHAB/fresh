import type { Plugin } from "vite";

export interface FreshConfig {
  islandsDir?: string;
  routeDir?: string;
}

export function fresh(config?: FreshConfig): Plugin[] {
  const islandSpecifiers = new Map<string, string>();

  return [
    {
      name: "fresh",
      config(cfg) {
        return {
          environments: {
            ssr: {
              build: {
                outDir: cfg.environments?.ssr?.build?.outDir ??
                  "_fresh/server",
              },
            },
            client: {
              build: {
                manifest: true,
                input: "fresh:client-entry",
                outDir: cfg.environments?.client?.build?.outDir ??
                  "_fresh/client",
                rollupOptions: {
                  output: {
                    manualChunks(id, _meta) {
                      const island = islandSpecifiers.get(id);
                      if (island !== undefined) {
                        return island;
                      }
                    },
                  },
                },
              },
            },
          },
        };
      },
    },
    snapshotPlugin({ specifiers: islandSpecifiers }),
    fsRoutesPlugin(),
    buildIdPlugin(),
  ];
}

const AUTOGEN_WARNING = `// DO NOT EDIT: This file is autogenerated`;

function snapshotPlugin(options: { specifiers: Map<string, string> }): Plugin {
  const modName = "fresh:snapshot";

  return {
    name: modName,
    applyToEnvironment(env) {
      return env.name === "ssr";
    },
    resolveId(id) {
      console.log(JSON.stringify(id));
      if (id === modName) {
        return `\0${modName}`;
      }
    },
    load(id) {
      if (id !== `\0${modName}`) return;

      const specifiers = Array.from(options.specifiers);
      const imports = specifiers.map((spec, i) => {
        return `import * as island_${i} from "${spec}";`;
      });

      const tagIslands = specifiers.map((_, i) => {
        return `tagIslands(island_${i});`;
      });

      return `${AUTOGEN_WARNING}
import { IslandPreparer } from "fresh:internals";
${imports.join("\n")}

// Tag as islands
function tagIslands(mod) {
  for (const value of Object.values(mod)) {
    if (typeof value === "function") {
      value.island = true;
    }
  }
}

${tagIslands.join("\n")}
`;
    },
  };
}

function fsRoutesPlugin(): Plugin {
  const modName = `fresh:fs_routes`;

  return {
    name: "fresh:fs_routes",
    applyToEnvironment(env) {
      return env.name === "ssr";
    },
    resolveId(id) {
      if (id === modName) {
        return `\0${modName}`;
      }
    },
    load(id) {
      if (id !== `\0${modName}`) return;
    },
  };
}

function buildIdPlugin(): Plugin {
  return {
    name: "fresh:build_id",
    config(_, env) {
      const isDev = env.command === "serve";
      const arr = new Uint32Array(1);
      crypto.getRandomValues(arr);
      const hash = String(arr[0]);

      return {
        define: {
          FRESH_BUILD_ID: JSON.stringify(hash),
        },
      };
    },
  };
}
